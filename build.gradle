plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.9'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'com.google.cloud.tools.jib' version '3.2.1'
	id 'jacoco'
}

group = 'com.techeer'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'io.springfox:springfox-boot-starter:3.0.0'
	implementation 'org.springframework.data:spring-data-elasticsearch:4.4.0'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

jib {
	from {
		image = "openjdk:11-jre-slim"
		auth {
			username = project.DOCKER_ID
			password = project.DOCKER_PASSWORD
		}
	}
	to {
		image = project.DOCKER_ID + "/" + project.DOCKER_IMAGE_NAME
		auth {
			username = project.DOCKER_ID
			password = project.DOCKER_PASSWORD
		}
		tags = ["latest"]
	}
	container {
		jvmFlags = ["-Xms128m", "-Xmx128m"]
	}
}

jacoco {
	toolVersion = "0.8.7"
}

jacocoTestReport {
	reports {
		xml.enabled true
		csv.enabled true
		html.enabled true

		xml.destination file("${buildDir}/jacoco/index.xml")
		csv.destination file("${buildDir}/jacoco/index.csv")
		html.destination file("${buildDir}/jacoco/index.html")
	}
	def Qdomains = []
	for (qPattern in '**/QA'..'**/QZ') {
		Qdomains.add(qPattern + '*')
	}

	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, excludes: [
							"**/*Application*",
							"**/*Mapper*",
							"**/entity/",
							"**/jwt/",
							"**/user/exception",
							"**/user/sevcie/LoginService",
							"**/*StatusNotFoundException*",
							"**/*Exception*",
							"**/config",
							"**/org/elasticsearch/**" // Elasticsearch 관련 클래스 제외
					] + Qdomains)
				})
		)
	}
	finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled = true
			element = 'CLASS'

			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.40
			}
			excludes = [
					"*.*Application*",
					"*.*Mapper*",
					"*.entity.*",
					"*.reading.exception.StatusNotFoundException*",
					"*.user.exception.*",
					"*.user.service.LoginService*",
					"*.global.jwt.*",
					"*.global.config.*",
					"*.global.error.ErrorResponse*",
					"*.global.error.GlobalExceptionHandler",
			]
		}

	}
}


test {
	finalizedBy 'jacocoTestReport'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
	finalizedBy 'jacocoTestCoverageVerification'
}

tasks.named("bootBuildImage") { // ./gradlew bootBuildImage 시 docker hub로 배포
	imageName = project.USERNAME + "/" + "checkitbackendonly"
	publish = true
	docker {
		publishRegistry {
			username = project.USERNAME
			password = project.DOCKER_PASSWORD
		}
	}
}